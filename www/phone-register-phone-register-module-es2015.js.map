{"version":3,"sources":["./src/app/phone-register/phone-register.page.html","./src/app/models/country-phone.model.ts","./src/app/phone-register/phone-register.module.ts","./src/app/phone-register/phone-register.page.scss","./src/app/phone-register/phone-register.page.ts"],"names":[],"mappings":"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","file":"phone-register-phone-register-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n    <div id=\\\"recaptcha-container\\\"></div>\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"getOTP(validations_form.value)\\\">\\n     <div formGroupName=\\\"country_phone\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n        <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n        <ion-input placeholder=\\\"{{ validations_form.value.country_phone.country.sample_phone }}\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n        <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Get OTP</ion-button>\\n  </form>\\n  <ion-item>\\n      <ion-label position=\\\"floating\\\">OTP</ion-label>\\n      <ion-input color = \\\"primary\\\" type=\\\"text\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"code\\\"></ion-input>\\n    </ion-item>\\n  <ion-button expand=\\\"full\\\" (click)=\\\"verify()\\\">Verify OTP</ion-button>\\n</ion-content>\"","import libphonenumber from 'google-libphonenumber';\n\nexport class CountryPhone {\n  iso: string;\n  name: string;\n  code: string;\n  sample_phone: string;\n\n  constructor (iso: string, name: string) {\n    this.iso = iso;\n    this.name = name;\n\n    let phoneUtil = libphonenumber.PhoneNumberUtil.getInstance(),\n        PNF = libphonenumber.PhoneNumberFormat,\n        PNT = libphonenumber.PhoneNumberType,\n        country_example_number = phoneUtil.getExampleNumberForType(this.iso, PNT.MOBILE),\n        // We need to define what kind of country phone number type we are going to use as a mask.\n        // You can choose between many types including:\n        //    - FIXED_LINE\n        //    - MOBILE\n        //    - For more types please refer to google libphonenumber repo (https://github.com/googlei18n/libphonenumber/blob/f9e9424769964ce1970c6ed2bd60b25b976dfe6f/javascript/i18n/phonenumbers/phonenumberutil.js#L913)\n        example_number_formatted = phoneUtil.format(country_example_number, PNF.NATIONAL);\n        // We need to define how are we going to format the phone number\n        // You can choose between many formats including:\n        //    - NATIONAL\n        //    - INTERNATIONAL\n        //    - E164\n        //    - RFC3966\n\n    this.sample_phone = example_number_formatted;\n    this.code = \"+\" + country_example_number.getCountryCode();\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PhoneRegisterPage } from './phone-register.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PhoneRegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [PhoneRegisterPage]\n})\nexport class PhoneRegisterPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9pb25pYy1kb250LWRlbGV0ZS9rYXZ5YW1tYS9sb2thcHBhL3NyYy9hcHAvcGhvbmUtcmVnaXN0ZXIvcGhvbmUtcmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9waG9uZS1yZWdpc3Rlci9waG9uZS1yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUNBRjs7QURHQTtFQUNFLGdCQUFBO0FDQUYiLCJmaWxlIjoic3JjL2FwcC9waG9uZS1yZWdpc3Rlci9waG9uZS1yZWdpc3Rlci5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59IiwiLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FirebaseX } from \"@ionic-native/firebase-x/ngx\";\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../models/validators';\n  import * as firebase from 'firebase';\n\n  import { AlertController } from '@ionic/angular';\nimport { ToastMsg } from '../models/toast-msg'\n  declare var SMSReceive: any;\n  var self = this;\n@Component({\n  selector: 'app-phone-register',\n  templateUrl: './phone-register.page.html',\n  styleUrls: ['./phone-register.page.scss'],\n})\nexport class PhoneRegisterPage implements OnInit {\n\n  public recaptchaVerifier:firebase.auth.RecaptchaVerifier;\n  OTP: string = '';\n  showOTPInput: boolean = false;\n  OTPmessage: string = 'An OTP is sent to your number. You should receive it in 15 s'\n  verificationId1: any;\n  code: number;\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n\n  countries: Array<CountryPhone>;\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private firebaseX: FirebaseX,\n    private firebaseAuthentication: FirebaseAuthentication,\n    private alertCtrl: AlertController,\n    private toastCtrl: ToastController\n  ) { }\n\n  ngOnInit() {\n    //this.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container');\n     //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      country_phone: this.country_phone_group\n    });\n}\n\n\nvalidation_messages = {\n  'phone': [\n    { type: 'required', message: 'Phone is required.' },\n    { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n  ],\n}\ncreateProfile(values)\n  {\n    /*this.angularFireAuth.authState.subscribe(auth=>{\n      this.angularFireDatabase.list(`profile/${auth.uid}`).push\n    });*/\n  }\n  onAuthStateChanged(callback){\n    self.firebaseAuthentication.onAuthStateChanged((userInfo) => {\n      if (userInfo) {\n          // user was signed in\n      } else {\n          // user was signed out\n      }\n  });\n  }\n  getOTP(values){\n    console.log(\"Get OTP called\");\n    this.register();\n    self.firebaseAuthentication.verifyPhoneNumber(\"+918073990063\", 30000).then ((credential) => {\n      //self.verificationId1 = credential.verificationId;\n    console.log(credential);\n    this.presentAlertPrompt(credential);\n    }).catch(e => {\n      console.log(e);\n  }); \n}\n\n  verify(credential){\n    console.log(\"verify called\");\n    this.firebaseAuthentication.signInWithVerificationId(this.verificationId1 , this.code);\n    \n  }\n  async presentAlertPrompt(credential) {\n    console.log(\"presentAlertPrompt called\");\n    const alert = await this.alertCtrl.create({\n      header: 'Enter OTP',\n      inputs: [\n        {\n          name: 'OTP',\n          type: 'text',\n          placeholder: 'Enter OTP'\n        }\n      ],\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'primary',\n          handler: () => {\n            console.log('Confirm Cancel');\n          }\n        }, {\n          text: 'Ok',\n          handler: (data) => {\n            this.firebaseAuthentication.signInWithVerificationId(credential , data.OTP);\n            console.log('Confirm Ok');\n          }\n        }\n      ],\n      backdropDismiss: false\n    });\n\n    await alert.present();\n    setTimeout(()=>{\n      alert.dismiss();\n  }, 60000);\n  }\n\n  next() {\n    this.showOTPInput = true;\n    this.start();\n  }\n\n  start() {\n    SMSReceive.startWatch(\n      () => {\n        console.log('watch started');\n        document.addEventListener('onSMSArrive', (e: any) => {\n          console.log('onSMSArrive()');\n          var IncomingSMS = e.data;\n          console.log('sms.address:' + IncomingSMS.address);\n          console.log('sms.body:' + IncomingSMS.body);\n          /* Debug received SMS content (JSON) */\n          console.log(JSON.stringify(IncomingSMS));\n          this.processSMS(IncomingSMS);\n        });\n      },\n      () => { console.log('watch start failed') }\n    )\n  }\n\n  stop() {\n    SMSReceive.stopWatch(\n      () => { console.log('watch stopped') },\n      () => { console.log('watch stop failed') }\n    )\n  }\n\n  processSMS(data) {\n    // Check SMS for a specific string sequence to identify it is you SMS\n    // Design your SMS in a way so you can identify the OTP quickly i.e. first 6 letters\n    // In this case, I am keeping the first 6 letters as OTP\n    const message = data.body;\n    if (message && message.indexOf('enappd_starters') != -1) {\n      this.OTP = data.body.slice(0, 6);\n      console.log(this.OTP);\n      this.OTPmessage = 'OTP received. Proceed to register'\n      this.stop();\n    }\n  }\n  async presentToast(message, show_button, position, duration) {\n    const toast = await this.toastCtrl.create({\n      message: message,\n      showCloseButton: show_button,\n      position: position,\n      duration: duration\n    });\n    toast.present();\n  }\n  register() {\n    if (this.OTP != '') {\n      this.presentToast('You are successfully registered', false, 'top', 1500);\n    }\n    else {\n      this.presentToast('Your OTP is not valid', false, 'top', 1500);\n    }\n  }\n\n  //signIn(phoneNumber: number){\n    getOTP1(values){\n    const appVerifier = this.recaptchaVerifier;\n    const phoneNumberString = \"+918073990063\";\n    self.firebaseAuthentication.verifyPhoneNumber(\"+918073990063\", 30000).then ( async (credential) => {\n      self.verificationId1 = credential.verificationId;\n        // SMS sent. Prompt user to type the code from the message, then sign the\n        // user in with confirmationResult.confirm(code).\n        const prompt = await this.alertCtrl.create({\n        header: 'Enter the Confirmation code',\n        inputs: [{ name: 'confirmationCode', placeholder: 'Confirmation Code' }],\n        buttons: [\n          { text: 'Cancel',\n            handler: data => { console.log('Cancel clicked'); }\n          },\n          { text: 'Send',\n            handler: data => {\n              this.firebaseAuthentication.signInWithVerificationId(credential, data.confirmationCode)\n                .then(function (result) {\n                  // User signed in successfully.\n                  console.log(\"User signed in successfully.\");\n                  console.log(result.user);\n                  // ...\n                }).catch(function (error) {\n                  // User couldn't sign in (bad verification code?)\n                  // ...\n                });\n            }\n          }\n        ]\n      });\n      await prompt.present();\n    })\n    .catch(function (error) {\n      console.error(\"SMS not sent\", error);\n    });\n    \n  }\n\n}"],"sourceRoot":""}