{"version":3,"sources":["./src/app/phone-register/phone-register.page.html","./src/app/models/country-phone.model.ts","./src/app/phone-register/phone-register.module.ts","./src/app/phone-register/phone-register.page.scss","./src/app/phone-register/phone-register.page.ts"],"names":[],"mappings":"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","file":"phone-register-phone-register-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"getOTP(validations_form.value)\\\">\\n     <div formGroupName=\\\"country_phone\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n        <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n        <ion-input placeholder=\\\"{{ validations_form.value.country_phone.country.sample_phone }}\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n        <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Get OTP</ion-button>\\n  </form>\\n  <ion-item>\\n      <ion-label position=\\\"floating\\\">OTP</ion-label>\\n      <ion-input color = \\\"primary\\\" type=\\\"text\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"code\\\"></ion-input>\\n    </ion-item>\\n  <ion-button expand=\\\"full\\\" (click)=\\\"verify()\\\">Verify OTP</ion-button>\\n</ion-content>\"","import libphonenumber from 'google-libphonenumber';\n\nexport class CountryPhone {\n  iso: string;\n  name: string;\n  code: string;\n  sample_phone: string;\n\n  constructor (iso: string, name: string) {\n    this.iso = iso;\n    this.name = name;\n\n    let phoneUtil = libphonenumber.PhoneNumberUtil.getInstance(),\n        PNF = libphonenumber.PhoneNumberFormat,\n        PNT = libphonenumber.PhoneNumberType,\n        country_example_number = phoneUtil.getExampleNumberForType(this.iso, PNT.MOBILE),\n        // We need to define what kind of country phone number type we are going to use as a mask.\n        // You can choose between many types including:\n        //    - FIXED_LINE\n        //    - MOBILE\n        //    - For more types please refer to google libphonenumber repo (https://github.com/googlei18n/libphonenumber/blob/f9e9424769964ce1970c6ed2bd60b25b976dfe6f/javascript/i18n/phonenumbers/phonenumberutil.js#L913)\n        example_number_formatted = phoneUtil.format(country_example_number, PNF.NATIONAL);\n        // We need to define how are we going to format the phone number\n        // You can choose between many formats including:\n        //    - NATIONAL\n        //    - INTERNATIONAL\n        //    - E164\n        //    - RFC3966\n\n    this.sample_phone = example_number_formatted;\n    this.code = \"+\" + country_example_number.getCountryCode();\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { PhoneRegisterPage } from './phone-register.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PhoneRegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [PhoneRegisterPage]\n})\nexport class PhoneRegisterPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9JT05JQy9sb2thcHBhL2thdnlhL3NyYy9hcHAvcGhvbmUtcmVnaXN0ZXIvcGhvbmUtcmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9waG9uZS1yZWdpc3Rlci9waG9uZS1yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUNBRjs7QURHQTtFQUNFLGdCQUFBO0FDQUYiLCJmaWxlIjoic3JjL2FwcC9waG9uZS1yZWdpc3Rlci9waG9uZS1yZWdpc3Rlci5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59IiwiLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FirebaseX } from \"@ionic-native/firebase-x/ngx\";\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../models/validators';\n  import * as firebase from 'firebase';\n\n\n@Component({\n  selector: 'app-phone-register',\n  templateUrl: './phone-register.page.html',\n  styleUrls: ['./phone-register.page.scss'],\n})\nexport class PhoneRegisterPage implements OnInit {\n\n  signInWithVerificationId: string;\n  verificationId: any;\n  code: number;\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n\n  countries: Array<CountryPhone>;\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private firebaseX: FirebaseX,\n    private firebaseAuthentication: FirebaseAuthentication\n  ) { }\n\n  ngOnInit() {\n     //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      country_phone: this.country_phone_group\n    });\n}\n\n\nvalidation_messages = {\n  'phone': [\n    { type: 'required', message: 'Phone is required.' },\n    { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n  ],\n}\ncreateProfile(values)\n  {\n    /*this.angularFireAuth.authState.subscribe(auth=>{\n      this.angularFireDatabase.list(`profile/${auth.uid}`).push\n    });*/\n  }\n  getOTP(values){\n    console.log(\"Get OTP called\");\n    this.firebaseAuthentication.verifyPhoneNumber(\"+918073990063\", 3000).then (function(verificationId) {\n    this.verificationId = verificationId.verificationId;\n    console.log(\"OTP Successfully Sent\");\n    }); \n}\n\n  verify(){\n    this.firebaseAuthentication.signInWithVerificationId(this.verificationId , this.code);\n  \n  }\n\n\n}\n"],"sourceRoot":""}