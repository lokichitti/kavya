{"version":3,"sources":["./src/app/ph-register/ph-register.page.html","./src/app/ph-register/ph-register.module.ts","./src/app/ph-register/ph-register.page.scss","./src/app/ph-register/ph-register.page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,wkBAAwkB,WAAW,mMAAmM,6DAA6D,wgBAAwgB,sBAAsB,ygB;;;;;;;;;;;;;;;;;;;;;;ACAx0C;AACM;AACF;AACU;AACF;AACR;AAEO;AAEpD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gEAAc;KAC1B;CACF,CAAC;AAYF;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAVhC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,kEAAmB;gBACnB,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,gEAAc,CAAC;SAC/B,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;AC1BjC,kCAAkC,eAAe,oBAAoB,sBAAsB,qBAAqB,GAAG,iBAAiB,qBAAqB,GAAG,6CAA6C,uyB;;;;;;;;;;;;;;;;;;;;;;;;;ACAvJ;AACM;AAGK;AACL;AACf;AACW;AACQ;AAIV;AAQlD;IASE,wBACS,WAAwB,EACvB,MAAc,EACd,eAAgC,EAChC,mBAAwC;QAHzC,gBAAW,GAAX,WAAW,CAAa;QACvB,WAAM,GAAN,MAAM,CAAQ;QACd,oBAAe,GAAf,eAAe,CAAiB;QAChC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAVlD,SAAI,GAAG,EAAE,CAAC;QAoCV,wBAAmB,GAAG;YACpB,OAAO,EAAE;gBACP,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,oBAAoB,EAAE;gBACnD,EAAE,IAAI,EAAE,mBAAmB,EAAE,OAAO,EAAE,kDAAkD,EAAE;aAC3F;SACF,CAAC;IA9BE,CAAC;IAEL,iCAAQ,GAAR;QACE,qHAAqH;QACrH,sEAAsE;QACtE,IAAI,CAAC,SAAS,GAAG;YACf,IAAI,wEAAY,CAAC,IAAI,EAAE,OAAO,CAAC;YAC/B,IAAI,wEAAY,CAAC,IAAI,EAAE,eAAe,CAAC;YACvC,IAAI,wEAAY,CAAC,IAAI,EAAE,QAAQ,CAAC;SACjC,CAAC;QACF,IAAI,OAAO,GAAG,IAAI,0DAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,QAAQ,CAAC,CAAC;QACtE,IAAI,KAAK,GAAG,IAAI,0DAAW,CAAC,EAAE,EAAE,yDAAU,CAAC,OAAO,CAAC;YACjD,yDAAU,CAAC,QAAQ;YACnB,iEAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC;SAC1C,CAAC,CAAC,CAAC;QACJ,IAAI,CAAC,mBAAmB,GAAG,IAAI,wDAAS,CAAC;YACvC,OAAO,EAAE,OAAO;YAChB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC7C,aAAa,EAAE,IAAI,CAAC,mBAAmB;SACxC,CAAC,CAAC;IACL,CAAC;IASD,sCAAa,GAAb,UAAc,MAAM;QAElB;;aAEK;IACP,CAAC;IACK,+BAAM,GAAZ,UAAa,MAAM;;;;;;KASlB;IAED,+BAAM,GAAN;QACC;;;aAGK;IACN,CAAC;;gBA1DqB,0DAAW;gBACf,sDAAM;gBACG,iEAAe;gBACX,yEAAmB;;IAbvC,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;YAC3B,yJAAsC;;SAEvC,CAAC;+EAWsB,0DAAW;YACf,sDAAM;YACG,iEAAe;YACX,yEAAmB;OAbvC,cAAc,CAsE1B;IAAD,qBAAC;CAAA;AAtE0B","file":"ph-register-ph-register-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"getOTP(validations_form.value)\\\">\\n     <div formGroupName=\\\"country_phone\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n        <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n        <ion-input placeholder=\\\"{{ validations_form.value.country_phone.country.sample_phone }}\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n        <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Get OTP</ion-button>\\n  </form>\\n  <ion-item>\\n      <ion-label position=\\\"floating\\\">OTP</ion-label>\\n      <ion-input color = \\\"primary\\\" type=\\\"text\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"code\\\"></ion-input>\\n    </ion-item>\\n  <ion-button expand=\\\"full\\\" (click)=\\\"verify()\\\">Verify</ion-button>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { PhRegisterPage } from './ph-register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: PhRegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [PhRegisterPage]\n})\nexport class PhRegisterPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9JT05JQy9sb2thcHBhL2thdnlhL3NyYy9hcHAvcGgtcmVnaXN0ZXIvcGgtcmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9waC1yZWdpc3Rlci9waC1yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUNBRjs7QURHQTtFQUNFLGdCQUFBO0FDQUYiLCJmaWxlIjoic3JjL2FwcC9waC1yZWdpc3Rlci9waC1yZWdpc3Rlci5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59IiwiLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport { AngularFireDatabase } from 'angularfire2/database';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../models/validators';\nimport * as firebase from 'firebase';\n\n@Component({\n  selector: 'app-ph-register',\n  templateUrl: './ph-register.page.html',\n  styleUrls: ['./ph-register.page.scss'],\n})\nexport class PhRegisterPage implements OnInit {\n \n  verificationId: any;\n  code = '';\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n\n  countries: Array<CountryPhone>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private angularFireAuth: AngularFireAuth,\n    private angularFireDatabase: AngularFireDatabase\n  ) { }\n\n  ngOnInit() {\n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      country_phone: this.country_phone_group\n    });\n  }\n\n  validation_messages = {\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n  };\n\n  createProfile(values)\n  {\n    /*this.angularFireAuth.authState.subscribe(auth=>{\n      this.angularFireDatabase.list(`profile/${auth.uid}`).push\n    });*/\n  }\n  async getOTP(values){\n   // console.log(values);\n   // (<any>window).FirebasePlugin.verfyPhoneNumber(\"+918073990063\"/*values.country_phone.phone*/, 60, ( credential ) => {\n     /* alert(\"OTP Sent Successfully\");\n      console.log(credential);\n      this.verificationId = credential.verificationId;\n    }, (error) =>{\n      console.error(error);\n    });*/\n  }\n\n  verify(){\n   /*   let signInCredential = firebase.auth.PhoneAuthProvider.credential(this.verificationId, this.code);\n      firebase.auth().signInWithCredential(signInCredential).then((info) => { console.log(info);}, (error) => {\n      console.log(error);\n    })*/\n  }\n\n}"],"sourceRoot":""}