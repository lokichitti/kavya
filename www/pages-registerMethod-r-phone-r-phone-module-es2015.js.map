{"version":3,"sources":["./src/app/pages/registerMethod/r-phone/r-phone.page.html","./src/app/pages/registerMethod/r-phone/r-phone.module.ts","./src/app/pages/registerMethod/r-phone/r-phone.page.scss","./src/app/pages/registerMethod/r-phone/r-phone.page.ts","./src/app/services/platform/platform.service.ts"],"names":[],"mappings":"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","file":"pages-registerMethod-r-phone-r-phone-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n      <ion-title>Register</ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  \\n  <ion-content padding class=\\\"form-content\\\">\\n    <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form)\\\">\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">First name</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n      \\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Last name</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.lastname\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lastname').hasError(validation.type) && (validations_form.get('lastname').dirty || validations_form.get('lastname').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>      \\n      \\n          <div formGroupName=\\\"country_phone\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n              <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n                <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n              <ion-input placeholder=\\\"Enter 10 digit mobile number\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n          </div>\\n      \\n      \\n          <div formGroupName=\\\"matching_passwords\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n              <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('password').hasError(validation.type) && (validations_form.get('matching_passwords').get('password').dirty || validations_form.get('matching_passwords').get('password').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n      \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Confirm Password</ion-label>\\n              <ion-input type=\\\"password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n          </div>\\n          <!-- These validations are for the form group -->\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n      \\n          <ion-item>\\n            <ion-label color=\\\"primary\\\">I accept terms and conditions</ion-label>\\n            <ion-checkbox color=\\\"primary\\\" formControlName=\\\"terms\\\"></ion-checkbox>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n          <ion-button color=\\\"primary\\\" class=\\\"login-margin\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\" [disabled]=\\\"disableGetOTPButton\\\">Submit</ion-button>\\n    </form>\\n    <ion-item>\\n        <ion-label position=\\\"floating\\\">OTP</ion-label>\\n        <ion-input color = \\\"primary\\\" type=\\\"text\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"OTPcode\\\"></ion-input>\\n      </ion-item>\\n      \\n    <ion-button class=\\\"login-margin\\\" expand=\\\"full\\\" (click)=\\\"verify(validations_form)\\\" [disabled]=\\\"disableVerifyButton\\\">Verify OTP</ion-button>\\n  \\n    <div>\\n      <button [routerLink]=\\\"['/first']\\\" align=\\\"center\\\" class=\\\"login-margin\\\">\\n        <img src=\\\"assets/image/login.png\\\">\\n      </button>\\n    </div>\\n  </ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { RPhonePage } from './r-phone.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RPhonePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RPhonePage]\n})\nexport class RPhonePageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n\\n.home-style {\\n  text-align: center;\\n  margin-top: 2000px;\\n}\\n\\n.login-margin {\\n  margin-top: 10px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n\\n.register-margin {\\n  margin-top: 50px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2htZWNkMDAxNTIzL2lvbmljLWRvbnQtZGVsZXRlL2ZpcmViYXNlLXdvcmtpbmcvcHJvZ3Jlc3Mvc3JjL2FwcC9wYWdlcy9yZWdpc3Rlck1ldGhvZC9yLXBob25lL3ItcGhvbmUucGFnZS5zY3NzIiwic3JjL2FwcC9wYWdlcy9yZWdpc3Rlck1ldGhvZC9yLXBob25lL3ItcGhvbmUucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBRUUsVUFBQTtFQUNBLGVBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0FDQUY7O0FER0E7RUFDRSxnQkFBQTtBQ0FGOztBRElBO0VBRUUsa0JBQUE7RUFDQSxrQkFBQTtBQ0ZGOztBREtBO0VBRUUsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FDSEY7O0FETUE7RUFFRSxnQkFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7QUNKRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyTWV0aG9kL3ItcGhvbmUvci1waG9uZS5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59XG5cblxuLmhvbWUtc3R5bGVcbntcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAyMDAwcHg7XG59XG5cbi5sb2dpbi1tYXJnaW5cbntcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLnJlZ2lzdGVyLW1hcmdpblxue1xuICBtYXJnaW4tdG9wOiA1MHB4O1xuICBtYXJnaW4tbGVmdDogMjBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufVxuIiwiLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59XG5cbi5ob21lLXN0eWxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAyMDAwcHg7XG59XG5cbi5sb2dpbi1tYXJnaW4ge1xuICBtYXJnaW4tdG9wOiAxMHB4O1xuICBtYXJnaW4tbGVmdDogMjBweDtcbiAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xufVxuXG4ucmVnaXN0ZXItbWFyZ2luIHtcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn0iXX0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../../../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FirebaseX } from \"@ionic-native/firebase-x/ngx\";\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../../../models/validators';\nimport * as firebase from 'firebase';\nimport { AlertController } from '@ionic/angular';\nimport { AuthService } from 'src/app/services/user/auth.service';\nimport { PlatformService } from 'src/app/services/platform/platform.service';\nimport { AlertService } from '../../../services/alert';\nimport { Storage } from '@ionic/storage';\nimport { HomePage } from '../../home/home.page';\n\n  var phoneSignInWithVerificationId: any;\n  var phoneNumber: string;\n//{{ validations_form.value.country_phone.country.code }}\n@Component({\n  selector: 'app-r-phone',\n  templateUrl: './r-phone.page.html',\n  styleUrls: ['./r-phone.page.scss'],\n})\nexport class RPhonePage implements OnInit {\n\n  OTP: string = '';\n  showOTPInput: boolean = false;\n  OTPmessage: string = 'An OTP is sent to your number. You should receive it in 15 s'\n  verificationId1: any;\n  code: number;\n  OTPcode: number=undefined;\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n  disableVerifyButton: boolean = true;\n  disableGetOTPButton: boolean = false;\n  countries: Array<CountryPhone>;\n  matching_passwords_group: FormGroup;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private firebaseAuthentication: FirebaseAuthentication,\n    private alertCtrl: AlertController,\n    private toastCtrl: ToastController,\n    public alert: AlertService,\n    private storage: Storage,\n    private platformService:PlatformService\n  ) { }\n\n  ngOnInit() {\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      country_phone: this.country_phone_group,\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  async onSubmit(values): Promise<void> {\n    if(this.platformService.DEVICE_TYPE != \"BROWSER\"){\n    var globalErrorCheck=0;\n    phoneNumber = values.value.country_phone.country.code + values.value.country_phone.phone;\n    console.log(\"Get OTP called \" + phoneNumber);\n    phoneSignInWithVerificationId = null;\n    this.disableGetOTPButton = true;\n    this.disableVerifyButton = false;\n    \n    this.alert.presentAlert('SMS Sent', 'Please enter 6 digit OTP below');\n    this.firebaseAuthentication.verifyPhoneNumber(phoneNumber, 3000)\n    .then (function(verificationId) {      \n      phoneSignInWithVerificationId = verificationId;\n      globalErrorCheck=1;\n      console.log(\"OTP Sent successfully\" + phoneNumber);\n      //this.presentAlertPrompt(values);\n    }).catch(e => {\n      console.log(\"Get OTP failed \");\n      console.log(e);\n      this.disableGetOTPButton = false;\n      this.disableVerifyButton = true;\n      this.alert.handleError(e);\n  }).finally(function() {\n    console.log('This finally block');\n    if(globalErrorCheck){\n      console.log(\"Get OTP called \");\n      this.disableGetOTPButton = true;\n      this.disableVerifyButton = false;\n      this.alert.presentAlert('SMS Sent', 'Please enter 6 digit OTP below');\n    } \n  });   \n}\nelse{\n  this.alert.presentAlert('SMS not sent', \"Try from mobile devices (browser doesn't support this feature)\");\n}\n}\n\nasync register(values): Promise<void> {\n    const email=\"ph\"+phoneNumber+\"@meandmyshop.com\";\n    const password=values.value.matching_passwords.password;\n  try {    \n    const userCredential: firebase.auth.UserCredential = await this.authService.signupPhone(\n      email,\n      password\n    );\n    await this.alert.hideLoading();\n    //this.storage.set('email', values.email);\n    //this.storage.set('password', values.matching_passwords.password);\n    this.authService.userId = userCredential.user.uid;\n    //this.storage.set('userCredential', userCredential);    \n    this.alert.presentAlert('Success', 'You are registered!')\n    //this.authService.sendVerificationMail();\n    this.authService.createPhoneUserProfile(this.authService.userId, values);\n    //this.router.navigate([\"/menu/home\"]);\n  } catch (error) {\n      await this.alert.hideLoading();\n      this.alert.handleError(error);\n      this.router.navigate([\"/first\"]);\n    //this.alert.presentAlert('Error', 'Something went wrong, please try again!')\n  }  \n}\n\nasync verify(values){\n\n    if(this.OTPcode && this.OTPcode<=999999 ){\n      console.log(\"verify called Entered OTP is \"+ this.OTPcode);\n      this.alert.showLoading();\n    // try{    //\n      this.firebaseAuthentication.signInWithVerificationId(phoneSignInWithVerificationId ,this.OTPcode)\n      .then ( async (res) =>{\n        console.log(\"Verify success\" + res.uid);\n        //this.storage.set('userCredential', res);\n        this.register(values);\n        await this.alert.hideLoading();\n        this.router.navigate([\"/menu/home\"]);      \n      }).catch (async (error)=>{\n        console.log(\"Verify failed\" + phoneNumber);\n        await this.alert.hideLoading();\n        this.alert.handleError(error);\n      }).finally(async()=>{\n        await this.alert.hideLoading(); \n      }); \n    \n    }\n    else{\n      this.alert.presentAlert('Check your sms', 'Please enter 6 digit OTP!')\n    }\n  }\n}","import { Injectable } from '@angular/core';\nimport { Platform } from '@ionic/angular';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlatformService {\n\n  DEVICE_TYPE:string=undefined;\n  constructor(\n    public plt: Platform\n    ) {\n      if (this.plt.is('ios')) {\n        // This will only print when on iOS\n        console.log('I am an iOS device!');\n        this.DEVICE_TYPE = \"iOS\";\n      }\n      else if (this.plt.is('android')) {\n        // This will only print when on iOS\n        console.log('I am an Android device!');\n        this.DEVICE_TYPE=\"ANDROID\";\n      }\n      else {\n        // This will only print when on iOS\n        console.log('I am an web browser device!');\n        this.DEVICE_TYPE = \"BROWSER\";\n      }\n     }\n}\n"],"sourceRoot":""}