{"version":3,"sources":["./src/app/register/register.page.html","./src/app/register/country-phone.model.ts","./src/app/register/register.module.ts","./src/app/register/register.page.scss","./src/app/register/register.page.ts"],"names":[],"mappings":"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","file":"register-register-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form.value)\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Username</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"username\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.username\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('username').hasError(validation.type) && (validations_form.get('username').dirty || validations_form.get('username').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Last name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.lastname\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lastname').hasError(validation.type) && (validations_form.get('lastname').dirty || validations_form.get('lastname').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Gender</ion-label>\\n      <ion-select formControlName=\\\"gender\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n        <ion-select-option *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender\\\">{{gender}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n\\n    <div formGroupName=\\\"country_phone\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n        <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n        <ion-input placeholder=\\\"{{ validations_form.value.country_phone.country.sample_phone }}\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n\\n\\n    <div formGroupName=\\\"matching_passwords\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n        <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('password').hasError(validation.type) && (validations_form.get('matching_passwords').get('password').dirty || validations_form.get('matching_passwords').get('password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Confirm Password</ion-label>\\n        <ion-input type=\\\"password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n    <!-- These validations are for the form group -->\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label color=\\\"primary\\\">I accept terms and conditions</ion-label>\\n      <ion-checkbox color=\\\"primary\\\" formControlName=\\\"terms\\\"></ion-checkbox>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Submit data</ion-button>\\n  </form>\\n</ion-content>\"","import libphonenumber from 'google-libphonenumber';\n\nexport class CountryPhone {\n  iso: string;\n  name: string;\n  code: string;\n  sample_phone: string;\n\n  constructor (iso: string, name: string) {\n    this.iso = iso;\n    this.name = name;\n\n    let phoneUtil = libphonenumber.PhoneNumberUtil.getInstance(),\n        PNF = libphonenumber.PhoneNumberFormat,\n        PNT = libphonenumber.PhoneNumberType,\n        country_example_number = phoneUtil.getExampleNumberForType(this.iso, PNT.MOBILE),\n        // We need to define what kind of country phone number type we are going to use as a mask.\n        // You can choose between many types including:\n        //    - FIXED_LINE\n        //    - MOBILE\n        //    - For more types please refer to google libphonenumber repo (https://github.com/googlei18n/libphonenumber/blob/f9e9424769964ce1970c6ed2bd60b25b976dfe6f/javascript/i18n/phonenumbers/phonenumberutil.js#L913)\n        example_number_formatted = phoneUtil.format(country_example_number, PNF.NATIONAL);\n        // We need to define how are we going to format the phone number\n        // You can choose between many formats including:\n        //    - NATIONAL\n        //    - INTERNATIONAL\n        //    - E164\n        //    - RFC3966\n\n    this.sample_phone = example_number_formatted;\n    this.code = \"+\" + country_example_number.getCountryCode();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPage } from './register.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9pb25pYy1kb250LWRlbGV0ZS9rYXZ5YW1tYS9sb2thcHBhL3NyYy9hcHAvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIiwic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFRSxVQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0VBQ0EsZ0JBQUE7QUNBRjs7QURHQTtFQUNFLGdCQUFBO0FDQUYiLCJmaWxlIjoic3JjL2FwcC9yZWdpc3Rlci9yZWdpc3Rlci5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59IiwiLmVycm9yLW1lc3NhZ2Uge1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from './country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireModule } from '@angular/fire';\nimport { FirestoreService } from '../services/data/firestore.service';\nimport { LoadingController, AlertController } from '@ionic/angular';\n\nimport { Observable } from 'rxjs';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../models/validators';\nimport { UserService } from '../services/user/user.services';\nimport { AlertService } from '../services/alert';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  \n  validations_form: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n\n  countries: Array<CountryPhone>;\n  genders: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private angularFireAuth: AngularFireAuth,\n    private angularFireDatabase: AngularFireDatabase,\n    public user: UserService,\n    public alert: AlertService,\n    public afstore: AngularFirestore,\n    public firestoreService: FirestoreService,\n    public loadingCtrl: LoadingController,\n  ) { }\n\n  ngOnInit() {\n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n\n    this.genders = [\n      \"Male\",\n      \"Female\"\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      username: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      gender: new FormControl(this.genders[0], Validators.required),\n      country_phone: this.country_phone_group,\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters.' },\n      { type: 'validUsername', message: 'Your username has already been taken.' }\n    ],\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  async createProfile(values)\n  {\n      const loading = await this.loadingCtrl.create();    \n      const userName = values.username;\n      const email = values.email;\n      const phone = values.country_phone.phone;\n      const fName = values.name;\n      const lName = values.lastname;\n      const gender = values.gender;\n    \n      this.firestoreService\n        .createUser(userName, email, phone, fName, lName, gender )\n        .then(\n          () => {\n            loading.dismiss().then(() => {\n              this.router.navigateByUrl('');\n            });\n          },\n          error => {\n            console.error(error);\n          }\n        );\n    \n      return await loading.present();\n  }\n  username: string = \"\"\n\n  async onSubmit(values){\n    const { username} = this\n    this.username = values.username.toString();\n    console.log(values);\n    try{\n      const res = await this.angularFireAuth.auth.createUserWithEmailAndPassword(values.email, values.matching_passwords.password);\n      console.log(res);\n      this.afstore.doc(`users/${res.user.uid}`).set({\n        username\n      })\n      this.user.setUser({\n\t\t\t\tusername,\n\t\t\t\tuid: res.user.uid\n      })\n      this.alert.presentAlert('Success', 'You are registered!')\n      this.createProfile(values);\n      this.router.navigate([\"/profile\"]);\n\n    }\n    catch(e){\n      console.error(e);\n    }\n  }\n  \n\n}"],"sourceRoot":""}