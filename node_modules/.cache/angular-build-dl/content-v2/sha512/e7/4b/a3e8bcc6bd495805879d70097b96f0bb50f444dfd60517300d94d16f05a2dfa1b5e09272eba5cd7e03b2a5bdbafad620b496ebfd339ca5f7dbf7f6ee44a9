{"version":3,"sources":["src/app/pages/registerMethod/r-phone/r-phone.page.html","src/app/pages/registerMethod/r-phone/r-phone.module.ts","src/app/pages/registerMethod/r-phone/r-phone.page.scss","src/app/pages/registerMethod/r-phone/r-phone.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n      <ion-title>Register</ion-title>\\n    </ion-toolbar>\\n  </ion-header>\\n  \\n  <ion-content padding class=\\\"form-content\\\">\\n    <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form)\\\">\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">First name</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n      \\n          <ion-item>\\n            <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Last name</ion-label>\\n            <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.lastname\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lastname').hasError(validation.type) && (validations_form.get('lastname').dirty || validations_form.get('lastname').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>      \\n      \\n          <div formGroupName=\\\"country_phone\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n              <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n                <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n              </ion-select>\\n            </ion-item>\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Phone</ion-label>\\n              <ion-input placeholder=\\\"Enter 10 digit mobile number\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n          </div>\\n      \\n      \\n          <div formGroupName=\\\"matching_passwords\\\">\\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n              <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('password').hasError(validation.type) && (validations_form.get('matching_passwords').get('password').dirty || validations_form.get('matching_passwords').get('password').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n      \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Confirm Password</ion-label>\\n              <ion-input type=\\\"password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\n            </ion-item>\\n            <div class=\\\"validation-errors\\\">\\n              <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n                <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n                  <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n                </div>\\n              </ng-container>\\n            </div>\\n          </div>\\n          <!-- These validations are for the form group -->\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n      \\n          <ion-item>\\n            <ion-label color=\\\"primary\\\">I accept terms and conditions</ion-label>\\n            <ion-checkbox color=\\\"primary\\\" formControlName=\\\"terms\\\"></ion-checkbox>\\n          </ion-item>\\n          <div class=\\\"validation-errors\\\">\\n            <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n              <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\\\">\\n                <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n              </div>\\n            </ng-container>\\n          </div>\\n          <ion-button color=\\\"primary\\\" class=\\\"login-margin\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\" [disabled]=\\\"disableGetOTPButton\\\">Submit</ion-button>\\n    </form>\\n    <ion-item>\\n        <ion-label position=\\\"floating\\\">OTP</ion-label>\\n        <ion-input color = \\\"primary\\\" type=\\\"text\\\" placeholder=\\\"Enter code\\\" [(ngModel)]=\\\"OTPcode\\\"></ion-input>\\n      </ion-item>\\n      \\n    <ion-button class=\\\"login-margin\\\" expand=\\\"full\\\" (click)=\\\"verify(validations_form)\\\" [disabled]=\\\"disableVerifyButton\\\">Verify OTP</ion-button>\\n  \\n    <div>\\n      <button [routerLink]=\\\"['/first']\\\" align=\\\"center\\\" class=\\\"login-margin\\\">\\n        <img src=\\\"assets/image/login.png\\\">\\n      </button>\\n    </div>\\n  </ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { RPhonePage } from './r-phone.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RPhonePage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [RPhonePage]\n})\nexport class RPhonePageModule {}\n","export default \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n\\n.home-style {\\n  text-align: center;\\n  margin-top: 2000px;\\n}\\n\\n.login-margin {\\n  margin-top: 10px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n\\n.register-margin {\\n  margin-top: 50px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9pb25pYy1kb250LWRlbGV0ZS9rYXZ5YW1tYS9sb2thcHBhL3NyYy9hcHAvcGFnZXMvcmVnaXN0ZXJNZXRob2Qvci1waG9uZS9yLXBob25lLnBhZ2Uuc2NzcyIsInNyYy9hcHAvcGFnZXMvcmVnaXN0ZXJNZXRob2Qvci1waG9uZS9yLXBob25lLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVFLFVBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtBQ0FGOztBREdBO0VBQ0UsZ0JBQUE7QUNBRjs7QURJQTtFQUVFLGtCQUFBO0VBQ0Esa0JBQUE7QUNGRjs7QURLQTtFQUVFLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQ0hGOztBRE1BO0VBRUUsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FDSkYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9yZWdpc3Rlck1ldGhvZC9yLXBob25lL3ItcGhvbmUucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9yLW1lc3NhZ2VcbntcbiAgY29sb3I6IHJlZDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn1cblxuLnN1Ym1pdC1idG4ge1xuICBtYXJnaW4tdG9wOiA0MHB4O1xufVxuXG5cbi5ob21lLXN0eWxlXG57XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMjAwMHB4O1xufVxuXG4ubG9naW4tbWFyZ2luXG57XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59XG5cbi5yZWdpc3Rlci1tYXJnaW5cbntcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cbiIsIi5lcnJvci1tZXNzYWdlIHtcbiAgY29sb3I6IHJlZDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn1cblxuLnN1Ym1pdC1idG4ge1xuICBtYXJnaW4tdG9wOiA0MHB4O1xufVxuXG4uaG9tZS1zdHlsZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMjAwMHB4O1xufVxuXG4ubG9naW4tbWFyZ2luIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLnJlZ2lzdGVyLW1hcmdpbiB7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../../../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FirebaseX } from \"@ionic-native/firebase-x/ngx\";\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../../../models/validators';\nimport * as firebase from 'firebase';\nimport { AlertController } from '@ionic/angular';\nimport { AuthService } from 'src/app/services/user/auth.service';\nimport { AlertService } from '../../../services/alert';\nimport { Storage } from '@ionic/storage';\n\n  var phoneSignInWithVerificationId: any;\n  var phoneNumber: string;\n//{{ validations_form.value.country_phone.country.code }}\n@Component({\n  selector: 'app-r-phone',\n  templateUrl: './r-phone.page.html',\n  styleUrls: ['./r-phone.page.scss'],\n})\nexport class RPhonePage implements OnInit {\n\n  OTP: string = '';\n  showOTPInput: boolean = false;\n  OTPmessage: string = 'An OTP is sent to your number. You should receive it in 15 s'\n  verificationId1: any;\n  code: number;\n  OTPcode: number;\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n  disableVerifyButton: boolean = true;\n  disableGetOTPButton: boolean = false;\n  countries: Array<CountryPhone>;\n  matching_passwords_group: FormGroup;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private firebaseAuthentication: FirebaseAuthentication,\n    private alertCtrl: AlertController,\n    private toastCtrl: ToastController,\n    public alert: AlertService,\n    private storage: Storage\n  ) { }\n\n  ngOnInit() {\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n\n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      country_phone: this.country_phone_group,\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 6 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n\n  async onSubmit(values): Promise<void> {\n    var globalErrorCheck=0;\n    phoneNumber = values.value.country_phone.country.code + values.value.country_phone.phone;\n    console.log(\"Get OTP called \" + phoneNumber);\n    phoneSignInWithVerificationId = null;\n    this.disableGetOTPButton = true;\n    this.disableVerifyButton = false;\n    this.firebaseAuthentication.verifyPhoneNumber(phoneNumber, 3000)\n    .then (function(verificationId) {      \n      phoneSignInWithVerificationId = verificationId;\n      globalErrorCheck=1;\n      console.log(\"OTP Sent successfully\" + phoneNumber);\n      //this.presentAlertPrompt(values);\n    }).catch(e => {\n      console.log(\"Get OTP failed \");\n      console.log(e);\n      this.disableGetOTPButton = false;\n      this.disableVerifyButton = true;\n      this.alert.handleError(e);\n  }).finally(function() {\n    console.log('This finally block');\n    if(globalErrorCheck){\n      console.log(\"Get OTP called \");\n      this.disableGetOTPButton = true;\n      this.disableVerifyButton = false;\n      this.alert.presentAlert('SMS Sent', 'Please enter 6 digit OTP below');\n    } \n  });   \n}\n\nasync register(values): Promise<void> {\n    const email=\"ph\"+phoneNumber+\"@meandmyshop.com\";\n    const password=values.value.matching_passwords.password;\n  try {    \n    const userCredential: firebase.auth.UserCredential = await this.authService.signupPhone(\n      email,\n      password\n    );\n    await this.alert.hideLoading();\n    //this.storage.set('email', values.email);\n    //this.storage.set('password', values.matching_passwords.password);\n    this.authService.userId = userCredential.user.uid;\n    //this.storage.set('userCredential', userCredential);    \n    this.alert.presentAlert('Success', 'You are registered!')\n    //this.authService.sendVerificationMail();\n    this.authService.createPhoneUserProfile(this.authService.userId, values);\n    //this.router.navigate([\"/menu/home\"]);\n  } catch (error) {\n      await this.alert.hideLoading();\n      this.alert.handleError(error);\n      this.router.navigate([\"/first\"]);\n    //this.alert.presentAlert('Error', 'Something went wrong, please try again!')\n  }  \n}\n\nasync verify(values){\n\n  if(this.OTPcode){\n  console.log(\"verify called Entered OTP is \"+ this.OTPcode);\n  this.alert.showLoading();\n // try{    //\n    this.firebaseAuthentication.signInWithVerificationId(phoneSignInWithVerificationId ,this.OTPcode)\n    .then ( async (res) =>{\n      console.log(\"Verify success\" + phoneNumber);\n      //this.storage.set('userCredential', res);\n      this.register(values);\n      await this.alert.hideLoading();\n      this.router.navigate([\"/menu/home\"]);      \n    }).catch (async (error)=>{\n    console.log(\"Verify failed\" + phoneNumber);\n    await this.alert.hideLoading();\n    this.alert.handleError(error);\n    //this.alert.presentAlert('Error', 'Phone number exist, try login!')\n  }).finally(async()=>{\n    await this.alert.hideLoading(); \n  }); \n  \n  }\n  else{\n    this.alert.presentAlert('Error', 'Please enter 6 digit OTP!')\n  }\n}\n  \n  async presentAlertPrompt(values) {\n    console.log(\"presentAlertPrompt called\");\n    const alert = await this.alertCtrl.create({\n      header: 'OTP Sent Successfully',\n      inputs: [\n        {\n          name: 'OTP',\n          type: 'text',\n          placeholder: 'Enter OTP'\n        }\n      ],\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'primary',\n          handler: () => {\n            console.log('Confirm Cancel');\n            //this.alert.showLoading(); \n            this.disableGetOTPButton = false;\n            this.disableVerifyButton = true;\n          }\n        }, {\n          text: 'Ok',\n          handler: (data) => {\n            this.OTPcode = data.OTP;\n            this.verify(values);\n            console.log('Confirm Ok');\n            this.disableGetOTPButton = false;\n            this.disableVerifyButton = true;\n          }\n        }\n      ],\n      backdropDismiss: false\n    });\n    await alert.present();\n    setTimeout(()=>{\n      //this.alert.hideLoading();\n    //this.alert.presentAlert('Try again', 'Thanks for your patience'); \n      alert.dismiss();\n  }, 60000);\n  }\n\n}"],"sourceRoot":"webpack:///"}