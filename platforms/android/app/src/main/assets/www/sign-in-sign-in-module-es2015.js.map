{"version":3,"sources":["./src/app/sign-in/sign-in.page.html","./src/app/sign-in/sign-in.module.ts","./src/app/sign-in/sign-in.page.scss","./src/app/sign-in/sign-in.page.ts"],"names":[],"mappings":"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","file":"sign-in-sign-in-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Ionic 4 Forms</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form.value)\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Username</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"username\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.username\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('username').hasError(validation.type) && (validations_form.get('username').dirty || validations_form.get('username').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n     <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Submit data</ion-button>\\n  </form>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SignInPage } from './sign-in.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignInPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [SignInPage]\n})\nexport class SignInPageModule {}\n","module.exports = \".require {\\n  color: #f10101;\\n}\\n\\n.error-message {\\n  font-size: smaller;\\n  padding-left: 15px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9JT05JQy9sb2thcHBhL2thdnlhL3NyYy9hcHAvc2lnbi1pbi9zaWduLWluLnBhZ2Uuc2NzcyIsInNyYy9hcHAvc2lnbi1pbi9zaWduLWluLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGNBQUE7QUNDSjs7QURFRTtFQUNFLGtCQUFBO0VBQ0Esa0JBQUE7QUNDSiIsImZpbGUiOiJzcmMvYXBwL3NpZ24taW4vc2lnbi1pbi5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVxdWlyZSB7XG4gICAgY29sb3I6IHJnYigyNDEsIDEsIDEpO1xuICB9XG4gIFxuICAuZXJyb3ItbWVzc2FnZSB7XG4gICAgZm9udC1zaXplOiBzbWFsbGVyO1xuICAgIHBhZGRpbmctbGVmdDogMTVweDtcbiAgfSIsIi5yZXF1aXJlIHtcbiAgY29sb3I6ICNmMTAxMDE7XG59XG5cbi5lcnJvci1tZXNzYWdlIHtcbiAgZm9udC1zaXplOiBzbWFsbGVyO1xuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../register/country-phone.model'\nimport { UsernameValidator,PhoneValidator,PasswordValidator } from '../register/register.page'\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.page.html',\n  styleUrls: ['./sign-in.page.scss'],\n})\nexport class SignInPage implements OnInit {\n  validations_form: FormGroup;\n  matching_passwords_group: FormGroup;\n  country_phone_group: FormGroup;\n\n  countries: Array<CountryPhone>;\n  genders: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router\n  ) { }\n  ngOnInit() {  \n    //  We just use a few random countries, however, you can use the countries you need by just adding them to this list.\n    // also you can use a library to get all the countries from the world.\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n      \n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n    this.validations_form = this.formBuilder.group({\n      username: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(25),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      country_phone: this.country_phone_group,\n    });\n  }\n  validation_messages = {\n    'username': [\n      { type: 'required', message: 'Username is required.' },\n      { type: 'minlength', message: 'Username must be at least 5 characters long.' },\n      { type: 'maxlength', message: 'Username cannot be more than 25 characters long.' },\n      { type: 'pattern', message: 'Your username must contain only numbers and letters.' },\n      { type: 'validUsername', message: 'Your username has already been taken.' }\n    ],\n   'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n  };\n}\n"],"sourceRoot":""}