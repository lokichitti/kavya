{"version":3,"sources":["./src/app/pages/create-shop/create-shop.page.html","./src/app/pages/create-shop/create-shop.module.ts","./src/app/pages/create-shop/create-shop.page.scss","./src/app/pages/create-shop/create-shop.page.ts"],"names":[],"mappings":"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","file":"pages-create-shop-create-shop-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title color=\\\"light\\\">Create your shop</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content  padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"createMyShop(validations_form)\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Name your shop</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"shopName\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.shopName\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('shopName').hasError(validation.type) && (validations_form.get('shopName').dirty || validations_form.get('shopName').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Category</ion-label>\\n      <ion-select formControlName=\\\"category\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n        <ion-select-option *ngFor=\\\"let item of shopCategory\\\" [value]=\\\"item\\\">{{item}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Is your shop available for everyone</ion-label>\\n      <ion-select formControlName=\\\"visibility\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n        <ion-select-option *ngFor=\\\"let item of isVisibleForPublic\\\" [value]=\\\"item\\\">{{item}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Address</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"address\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.address\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('address').hasError(validation.type) && (validations_form.get('address').dirty || validations_form.get('address').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div> \\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Area</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"area\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.area\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('area').hasError(validation.type) && (validations_form.get('area').dirty || validations_form.get('area').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">City</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"city\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.city\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('city').hasError(validation.type) && (validations_form.get('city').dirty || validations_form.get('city').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">State</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"state\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.state\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('state').hasError(validation.type) && (validations_form.get('state').dirty || validations_form.get('state').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">pinCode</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"pinCode\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.pinCode\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('pinCode').hasError(validation.type) && (validations_form.get('pinCode').dirty || validations_form.get('pinCode').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <div>\\n      <ion-button class=\\\"locateme-margin\\\" (click)=\\\"locateMyShop()\\\">Locate my shop on map</ion-button>\\n\\n    </div>\\n    <div formGroupName=\\\"country_phone\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Country</ion-label>\\n        <ion-select formControlName=\\\"country\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n          <ion-select-option *ngFor=\\\"let item of countries\\\" [value]=\\\"item\\\">{{item.name}}</ion-select-option>\\n        </ion-select>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Contact phone</ion-label>\\n        <ion-input placeholder=\\\"Enter 10 digit mobile number\\\" type=\\\"text\\\" formControlName=\\\"phone\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.phone\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('country_phone').get('phone').hasError(validation.type) && (validations_form.get('country_phone').get('phone').dirty || validations_form.get('country_phone').get('phone').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n\\n    <ion-button color=\\\"primary\\\" class=\\\"login-margin\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Done</ion-button>\\n</form>\\n<ion-button class=\\\"login-margin\\\" expand=\\\"full\\\" (click)=\\\"locateMyShop()\\\">Locate my shop on map</ion-button>\\n</ion-content>\\n\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { CreateShopPage } from './create-shop.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CreateShopPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreateShopPage]\n})\nexport class CreateShopPageModule {}\n","module.exports = \".error-message {\\n  color: red;\\n  font-size: 14px;\\n  margin-left: 10px;\\n  margin-top: 10px;\\n}\\n\\n.submit-btn {\\n  margin-top: 40px;\\n}\\n\\n.home-style {\\n  text-align: center;\\n  margin-top: 2000px;\\n}\\n\\n.login-margin {\\n  margin-top: 10px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n\\n.locateme-margin {\\n  font-size: 10px;\\n  margin-top: 10px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n\\n.register-margin {\\n  margin-top: 50px;\\n  margin-left: 20px;\\n  margin-right: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2htZWNkMDAxNTIzL2lvbmljLWRvbnQtZGVsZXRlL2ZpcmViYXNlLXdvcmtpbmcvcHJvZ3Jlc3Mvc3JjL2FwcC9wYWdlcy9jcmVhdGUtc2hvcC9jcmVhdGUtc2hvcC5wYWdlLnNjc3MiLCJzcmMvYXBwL3BhZ2VzL2NyZWF0ZS1zaG9wL2NyZWF0ZS1zaG9wLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUVFLFVBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7RUFDQSxnQkFBQTtBQ0FGOztBREdBO0VBQ0UsZ0JBQUE7QUNBRjs7QURJQTtFQUVFLGtCQUFBO0VBQ0Esa0JBQUE7QUNGRjs7QURLQTtFQUVFLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQ0hGOztBRE1BO0VBRUUsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7RUFDQSxrQkFBQTtBQ0pGOztBRE9BO0VBRUUsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FDTEYiLCJmaWxlIjoic3JjL2FwcC9wYWdlcy9jcmVhdGUtc2hvcC9jcmVhdGUtc2hvcC5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXJyb3ItbWVzc2FnZVxue1xuICBjb2xvcjogcmVkO1xuICBmb250LXNpemU6IDE0cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICBtYXJnaW4tdG9wOiAxMHB4O1xufVxuXG4uc3VibWl0LWJ0biB7XG4gIG1hcmdpbi10b3A6IDQwcHg7XG59XG5cblxuLmhvbWUtc3R5bGVcbntcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAyMDAwcHg7XG59XG5cbi5sb2dpbi1tYXJnaW5cbntcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLmxvY2F0ZW1lLW1hcmdpblxue1xuICBmb250LXNpemU6IDEwcHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59XG5cbi5yZWdpc3Rlci1tYXJnaW5cbntcbiAgbWFyZ2luLXRvcDogNTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cbiIsIi5lcnJvci1tZXNzYWdlIHtcbiAgY29sb3I6IHJlZDtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgbWFyZ2luLXRvcDogMTBweDtcbn1cblxuLnN1Ym1pdC1idG4ge1xuICBtYXJnaW4tdG9wOiA0MHB4O1xufVxuXG4uaG9tZS1zdHlsZSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luLXRvcDogMjAwMHB4O1xufVxuXG4ubG9naW4tbWFyZ2luIHtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLmxvY2F0ZW1lLW1hcmdpbiB7XG4gIGZvbnQtc2l6ZTogMTBweDtcbiAgbWFyZ2luLXRvcDogMTBweDtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gIG1hcmdpbi1yaWdodDogMjBweDtcbn1cblxuLnJlZ2lzdGVyLW1hcmdpbiB7XG4gIG1hcmdpbi10b3A6IDUwcHg7XG4gIG1hcmdpbi1sZWZ0OiAyMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { FirebaseX } from \"@ionic-native/firebase-x/ngx\";\nimport { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\nimport { \n  UsernameValidator, \n  PhoneValidator, \n  PasswordValidator } from '../../models/validators';\nimport * as firebase from 'firebase';\nimport { AlertController } from '@ionic/angular';\nimport { AuthService } from 'src/app/services/user/auth.service';\nimport { AlertService } from '../../services/alert';\nimport { Storage } from '@ionic/storage';\nimport { ShopDetails } from 'src/app/models/user';\nimport { AuthFormComponent } from 'src/app/components/auth-form/auth-form.component';\n\n\n@Component({\n  selector: 'app-create-shop',\n  templateUrl: './create-shop.page.html',\n  styleUrls: ['./create-shop.page.scss'],\n})\nexport class CreateShopPage implements OnInit {\n  shopDetails:ShopDetails;\n  validations_form: FormGroup;\n  country_phone_group: FormGroup;\n  countries: Array<CountryPhone>;\n  shopCategory: Array<string>;\n  isVisibleForPublic: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    private authService: AuthService,\n    private firebaseAuthentication: FirebaseAuthentication,\n    private alertCtrl: AlertController,\n    private toastCtrl: ToastController,\n    public alert: AlertService,\n    private storage: Storage\n  ) { }\n\n  ngOnInit() {\n    this.countries = [\n      new CountryPhone('IN', 'India'),\n      new CountryPhone('US', 'United States'),\n      new CountryPhone('BR', 'Brasil')\n    ];\n    this.shopCategory = [\n      \"vegetables\",\n      \"dairy\",\n      \"stationaries\",\n      \"consumables\",\n      \"bakery\",\n      \"hotel\",\n    ];\n    this.isVisibleForPublic = [\n        \"Visible to public\",\n        \"Visible to selected members only\"\n    ];\n\n    \n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', Validators.compose([\n      Validators.required,\n      PhoneValidator.validCountryPhone(country)\n    ]));\n    this.country_phone_group = new FormGroup({\n      country: country,\n      phone: phone\n    });\n\n    this.validations_form = this.formBuilder.group({\n      shopName: new FormControl('', Validators.required),\n      visibility: new FormControl(this.isVisibleForPublic[0], Validators.required),\n      category: new FormControl(this.shopCategory[0], Validators.required),\n      address: new FormControl('', Validators.required),\n      //street: new FormControl('', Validators.required),\n      area: new FormControl('', Validators.required),\n      city: new FormControl('', Validators.required),\n      state: new FormControl('', Validators.required),\n      pinCode: new FormControl('', Validators.required),\n      country_phone: this.country_phone_group,\n    });\n  }\n\n  validation_messages = {\n    'shopName': [\n      { type: 'required', message: 'shopName is required.' }\n    ],\n    'address': [\n      { type: 'required', message: 'address is required.' }\n    ],\n    //'street': [\n    //  { type: 'required', message: 'street is required.' }\n    //],\n    'area': [\n      { type: 'required', message: 'area Name is required.' }\n    ],\n    'city': [\n      { type: 'required', message: 'city Name is required.' }\n    ],\n    'state': [\n      { type: 'required', message: 'state Name is required.' }\n    ],\n    'pinCode': [\n      { type: 'required', message: 'pinCode is required.' }\n    ],\n    'phone': [\n      { type: 'required', message: 'Phone is required.' },\n      { type: 'validCountryPhone', message: 'The phone is incorrect for the selected country.' }\n    ],\n  };\n\n  async createMyShop(shopDetails): Promise<void> {\n\n    this.authService.createShop(shopDetails);\n    this.alert.presentAlert('Your shop created', 'Add items and start selling!');\n    this.router.navigate([\"/menu/shop\"]); \n  }\n\n  locateMyShop(){\n\n  }\n\n\n}\n"],"sourceRoot":""}