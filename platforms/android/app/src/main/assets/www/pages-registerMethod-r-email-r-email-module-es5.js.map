{"version":3,"sources":["./src/app/pages/registerMethod/r-email/r-email.page.html","./src/app/models/validators.ts","./src/app/pages/registerMethod/r-email/r-email.module.ts","./src/app/pages/registerMethod/r-email/r-email.page.scss","./src/app/pages/registerMethod/r-email/r-email.page.ts","./src/app/services/user/auth.service.ts"],"names":[],"mappings":"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","file":"pages-registerMethod-r-email-r-email-module-es5.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Register</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding class=\\\"form-content\\\">\\n  <form [formGroup]=\\\"validations_form\\\"  (ngSubmit)=\\\"onSubmit(validations_form.value)\\\">\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Last name</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"lastname\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.lastname\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('lastname').hasError(validation.type) && (validations_form.get('lastname').dirty || validations_form.get('lastname').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <div formGroupName=\\\"matching_passwords\\\">\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Password</ion-label>\\n        <ion-input type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('password').hasError(validation.type) && (validations_form.get('matching_passwords').get('password').dirty || validations_form.get('matching_passwords').get('password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n\\n      <ion-item>\\n        <ion-label position=\\\"floating\\\" color=\\\"primary\\\">Confirm Password</ion-label>\\n        <ion-input type=\\\"password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"validation-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n          <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').get('confirm_password').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n    <!-- These validations are for the form group -->\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('matching_passwords').hasError(validation.type) && (validations_form.get('matching_passwords').get('confirm_password').dirty || validations_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label color=\\\"primary\\\">I accept terms and conditions</ion-label>\\n      <ion-checkbox color=\\\"primary\\\" formControlName=\\\"terms\\\"></ion-checkbox>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n        <div class=\\\"error-message\\\" *ngIf=\\\"validations_form.get('terms').hasError(validation.type) && (validations_form.get('terms').dirty || validations_form.get('terms').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-button color=\\\"primary\\\" class=\\\"submit-btn\\\" expand=\\\"full\\\" type=\\\"submit\\\" [disabled]=\\\"!validations_form.valid\\\">Submit</ion-button>\\n  </form>\\n</ion-content>\"","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport libphonenumber from 'google-libphonenumber';\nimport { CountryPhone } from '../models/country-phone.model';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport { AngularFireDatabase } from 'angularfire2/database';\n\nexport class UsernameValidator {\n\n    static validUsername(fc: FormControl){\n  \n      if(fc.value.toLowerCase() === \"abc123\" || fc.value.toLowerCase() === \"123abc\"){\n        return {\n          validUsername: true\n        };\n      } else {\n        return null;\n      }\n    }\n  }\n  export class PhoneValidator {\n    // Inspired on: https://github.com/yuyang041060120/ng2-validation/blob/master/src/equal-to/validator.ts\n    static validCountryPhone = (countryControl: AbstractControl): ValidatorFn => {\n      let subscribe: boolean = false;\n  \n      return (phoneControl: AbstractControl): {[key: string]: boolean} => {\n        if (!subscribe) {\n          subscribe = true;\n          countryControl.valueChanges.subscribe(() => {\n            phoneControl.updateValueAndValidity();\n          });\n        }\n  \n        if(phoneControl.value !== \"\"){\n          try{\n            const phoneUtil = libphonenumber.PhoneNumberUtil.getInstance();\n            let phoneNumber = \"\" + phoneControl.value + \"\",\n                region = countryControl.value.iso,\n                number = phoneUtil.parse(phoneNumber, region),\n                isValidNumber = phoneUtil.isValidNumber(number);\n  \n            if(isValidNumber){\n              return null;\n            }\n          }catch(e){\n            // console.log(e);\n            return {\n              validCountryPhone: true\n            };\n          }\n  \n          return {\n            validCountryPhone: true\n          };\n        }\n        else{\n          return null;\n        }\n      };\n    };\n  }\n  \n  export class PasswordValidator {\n  \n    // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n    static areEqual(formGroup: FormGroup) {\n      let val;\n      let valid = true;\n  \n      for (let key in formGroup.controls) {\n        if (formGroup.controls.hasOwnProperty(key)) {\n          let control: FormControl = <FormControl>formGroup.controls[key];\n  \n          if (val === undefined) {\n            val = control.value\n          } else {\n            if (val !== control.value) {\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n  \n      if (valid) {\n        return null;\n      }\n  \n      return {\n        areEqual: true\n      };\n    }\n  }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\n\nimport { REmailPage } from './r-email.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: REmailPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [REmailPage]\n})\nexport class REmailPageModule {}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyTWV0aG9kL3ItZW1haWwvci1lbWFpbC5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { UserCredential } from 'src/app/models/user';\nimport { AuthService } from 'src/app/services/user/auth.service';\nimport { AuthFormComponent } from 'src/app/components/auth-form/auth-form.component';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Validators, FormBuilder} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { AngularFireModule } from '@angular/fire';\nimport { FirestoreService } from '../../../services/data/firestore.service';\nimport { LoadingController, AlertController } from '@ionic/angular';\n\nimport { Observable } from 'rxjs';\nimport {\n  PasswordValidator } from '../../../models/validators';\nimport { UserService } from '../../../services/user/user.services';\nimport { AlertService } from '../../../services/alert';\n\n@Component({\n  selector: 'app-r-email',\n  templateUrl: './r-email.page.html',\n  styleUrls: ['./r-email.page.scss'],\n})\nexport class REmailPage implements OnInit {\n\n  validations_form: FormGroup;\n  matching_passwords_group: FormGroup;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router,\n    public loadingCtrl: LoadingController,\n    private authService: AuthService,\n    public alert: AlertService,\n  ) { }\n\n  ngOnInit() {\n  \n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    this.validations_form = this.formBuilder.group({\n      name: new FormControl('', Validators.required),\n      lastname: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'name': [\n      { type: 'required', message: 'Name is required.' }\n    ],\n    'lastname': [\n      { type: 'required', message: 'Last name is required.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Please wnter a valid email.' }\n    ],\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' },\n      { type: 'pattern', message: 'Your password must contain at least one uppercase, one lowercase, and one number.' }\n    ],\n    'confirm_password': [\n      { type: 'required', message: 'Confirm password is required.' }\n    ],\n    'matching_passwords': [\n      { type: 'areEqual', message: 'Password mismatch.' }\n    ],\n    'terms': [\n      { type: 'pattern', message: 'You must accept terms and conditions.' }\n    ],\n  };\n  \n  async onSubmit(values): Promise<void> {\n    \n    try {\n      //const loading = await this.loadingCtrl.create(); \n      const userCredential: firebase.auth.UserCredential = await this.authService.signup(\n        values\n      );\n      //return await loading.present();\n      this.authService.userId = userCredential.user.uid;\n      this.alert.presentAlert('Success', 'You are registered!')\n      this.authService.createProfile(this.authService.userId, values);\n      this.router.navigate([\"/home\"]);\n    } catch (error) {\n      this.alert.presentAlert('Error', 'Something went wrong, please try again!')\n    }\n    \n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { first } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { ProfileService } from 'src/app/services/profile.service';\nimport { LoadingController, AlertController } from '@ionic/angular';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  public userId: string;\n  constructor(\n    private afAuth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    public loadingCtrl: LoadingController,\n    private router: Router,    \n\n  ) { }\n\n  async createProfile(uId, values)\n  {\n      const loading = await this.loadingCtrl.create();    \n      const email = values.email;\n      const fName = values.name;\n      const lName = values.lastname;\n      const password = values.matching_passwords.password;\n      this.createUser(uId,email, fName, lName, password )\n        .then(\n          () => {\n            loading.dismiss().then(() => {\n            });\n          },\n          error => {\n            console.error(error);\n          }\n        );\n    \n      return await loading.present();\n  }\n\n  async createUser( uId: string, email: string, fName: string,\n    lName: string, password: string): Promise<void> {\n\n      await this.firestore.doc(`userProfile/${uId}`).set({\n        uId,\n        email,\n        fName,\n        lName,\n        password\n      });\n    }\n  getUser(): Promise<firebase.User> {\n    return this.afAuth.authState.pipe(first()).toPromise();\n   }\n\n   login(\n    email: string,\n    password: string\n   ): Promise<firebase.auth.UserCredential> {\n    return this.afAuth.auth.signInWithEmailAndPassword(email, password);\n   }\n\n   async signup(values): Promise<firebase.auth.UserCredential> {\n    const newUserCredential: firebase.auth.UserCredential = await this.afAuth.auth.createUserWithEmailAndPassword(\n      values.email,\n      values.matching_passwords.password\n    );\n   /* const email = values.email;\n    const password = values.matching_passwords.password;\n    const firstName = values.fName;\n    const lastName = values.lName;\n    await this.firestore\n    .doc(`userProfile/${newUserCredential.user.uid}`)\n    .set({ \n      email,\n      password,\n      firstName,\n      lastName\n    });*/\n    return newUserCredential;\n   }\n\n   resetPassword(email: string): Promise<void> {\n    return this.afAuth.auth.sendPasswordResetEmail(email);\n   }\n   \n   logout(): Promise<void> {\n    return this.afAuth.auth.signOut();\n   }\n}\n"],"sourceRoot":""}