{"version":3,"sources":["./src/app/map/map.page.html","./src/app/map/map.module.ts","./src/app/map/map.page.scss","./src/app/map/map.page.ts"],"names":[],"mappings":"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","file":"map-map-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>\\n      Geolocation App\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      User Current Location continuously upddating in background\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Latitude\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.latitude}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Longitude\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.longitude}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Country Code\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.countryCode}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Country Name\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.countryName}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Postal Code\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.postalCode}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Administrative Area\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.administrativeArea}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Sub Administrative Area\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.subAdministrativeArea}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Locality\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.locality}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Sub Locality\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.subLocality}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Thoroughfare\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.thoroughfare}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Sub Thoroughfare\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.subThoroughfare}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocation\\\">\\n    <ion-col>\\n      Areas Of Interest\\n    </ion-col>\\n    <ion-col>\\n      {{userLocation.areasOfInterest}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userCity\\\">\\n    <ion-col>\\n      Formatted address of user Current location which is continuously updating\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userCity\\\">\\n    <ion-col>\\n      {{userCity}}\\n    </ion-col>\\n  </ion-row>\\n  <div class=\\\"line\\\"></div>\\n  <ion-row>\\n    <ion-col>\\n      <ion-input clearInput type=\\\"text\\\" placeholder=\\\"Enter your location here for getting Latitude and Longitude\\\" [(ngModel)]=\\\"location\\\" class=\\\"input\\\"\\n        padding-horizontal clear-input=\\\"true\\\"></ion-input>\\n    </ion-col>\\n  </ion-row>\\n  <ion-row>\\n    <ion-col>\\n      <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" color=\\\"undefined\\\" (click)=\\\"forwardGeocode(location)\\\" class=\\\"btn-color\\\">\\n        <strong>Forward Geocode </strong>\\n      </ion-button>\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"lat\\\">\\n    <ion-col>\\n        Latitude and Longitude for this location\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"lat\\\">\\n    <ion-col>\\n        Latitude : {{lat}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"lat\\\">\\n    <ion-col>\\n        Longitude : {{lng}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row>\\n    <ion-col>\\n      <ion-input clearInput type=\\\"text\\\" placeholder=\\\"Enter lat here\\\" [(ngModel)]=\\\"latEnter\\\" class=\\\"input\\\" padding-horizontal clear-input=\\\"true\\\"></ion-input>\\n    </ion-col>\\n    <ion-col>\\n      <ion-input clearInput type=\\\"text\\\" placeholder=\\\"Enter lng here\\\" [(ngModel)]=\\\"lngEnter\\\" class=\\\"input\\\" padding-horizontal clear-input=\\\"true\\\"></ion-input>\\n    </ion-col>\\n  </ion-row>\\n\\n  <ion-row>\\n    <ion-col>\\n      <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" color=\\\"undefined\\\" (click)=\\\"reverseGeocode(latEnter,lngEnter)\\\" class=\\\"btn-color\\\">\\n        <strong>Reverse Geocode </strong>\\n      </ion-button>\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"latLngResult\\\">\\n    <ion-col>\\n      Location For this Latitude and Longitude\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"latLngResult\\\">\\n    <ion-col>\\n      {{this.latLngResult}}\\n    </ion-col>\\n  </ion-row>\\n  <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n          Location For this Latitude and Longitude\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Latitude\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.latitude}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Longitude\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.longitude}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Country Code\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.countryCode}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Country Name\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.countryName}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Postal Code\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.postalCode}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Administrative Area\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.administrativeArea}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Sub Administrative Area\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.subAdministrativeArea}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Locality\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.locality}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Sub Locality\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.subLocality}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Thoroughfare\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.thoroughfare}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Sub Thoroughfare\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.subThoroughfare}}\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngIf=\\\"userLocationFromLatLng\\\">\\n      <ion-col>\\n        Areas Of Interest\\n      </ion-col>\\n      <ion-col>\\n        {{userLocationFromLatLng.areasOfInterest}}\\n      </ion-col>\\n    </ion-row>\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MapPage } from './map.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MapPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [MapPage]\n})\nexport class MapPageModule {}\n","module.exports = \".input {\\n  background-color: #f0f0f0;\\n  border: 1px solid #d2d2d2;\\n  border-radius: 9px;\\n  font-size: 0.9em !important;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2xva2VzaC9pb25pYy1kb250LWRlbGV0ZS9rYXZ5YW1tYS9sb2thcHBhL3NyYy9hcHAvbWFwL21hcC5wYWdlLnNjc3MiLCJzcmMvYXBwL21hcC9tYXAucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0kseUJBQUE7RUFDQSx5QkFBQTtFQUNBLGtCQUFBO0VBQ0EsMkJBQUE7QUNBSiIsImZpbGUiOiJzcmMvYXBwL21hcC9tYXAucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4uaW5wdXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigyNDAsIDI0MCwgMjQwKTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMjEwLCAyMTAsIDIxMCk7XG4gICAgYm9yZGVyLXJhZGl1czogOXB4O1xuICAgIGZvbnQtc2l6ZTogLjllbSAhaW1wb3J0YW50O1xufSIsIi5pbnB1dCB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkMmQyZDI7XG4gIGJvcmRlci1yYWRpdXM6IDlweDtcbiAgZm9udC1zaXplOiAwLjllbSAhaW1wb3J0YW50O1xufSJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { NativeGeocoder,NativeGeocoderOptions,NativeGeocoderResult } from '@ionic-native/native-geocoder/ngx';\nimport {\n  ToastController,\n  Platform\n} from '@ionic/angular';\nimport {\n  GoogleMaps,\n  GoogleMap,\n  GoogleMapsEvent,\n  Marker,\n  GoogleMapsAnimation,\n  MyLocation\n} from '@ionic-native/google-maps';\ndeclare var google;\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.page.html',\n  styleUrls: ['./map.page.scss'],\n})\nexport class MapPage implements OnInit {\n\n  userLocation;\n  userCity;\n  lat;\n  lng;\n  location;\n  latLngResult;\n  userLocationFromLatLng;\n  constructor(public zone: NgZone, public geolocation: Geolocation, private nativeGeocoder: NativeGeocoder, private platform: Platform) {\n    this.initializeApp();\n  }\n  initializeApp() {\n    this.platform.ready().then(() => {\n      this.getUserLocation();\n    });\n  }\n  getUserLocation() {\n    this.geolocation.getCurrentPosition().then((resp) => {\n      this.getGeoLocation(resp.coords.latitude, resp.coords.longitude)\n      if (this.platform.is('cordova')) {\n        let options: NativeGeocoderOptions = {\n          useLocale: true,\n          maxResults: 5\n        };\n        this.nativeGeocoder.reverseGeocode(resp.coords.latitude, resp.coords.longitude, options)\n          .then((result: any) => {\n            console.log(result)\n            this.userLocation = result[0]\n            console.log(this.userLocation)\n          })\n          .catch((error: any) => console.log(error));\n      } else {\n        this.getGeoLocation(resp.coords.latitude, resp.coords.longitude)\n      }\n    }).catch((error) => {\n    });\n    let watch = this.geolocation.watchPosition();\n    watch.subscribe((data) => {\n      // data can be a set of coordinates, or an error (if an error occurred).\n       data.coords.latitude\n       data.coords.longitude\n      let options: NativeGeocoderOptions = {\n        useLocale: true,\n        maxResults: 5\n      };\n      if (this.platform.is('cordova')) {\n        let options: NativeGeocoderOptions = {\n          useLocale: true,\n          maxResults: 5\n        };\n        this.nativeGeocoder.reverseGeocode(data.coords.latitude, data.coords.longitude, options)\n          .then((result: NativeGeocoderResult[]) => {\n            console.log(result)\n            this.userLocation = result[0]\n            console.log(this.userLocation)\n          })\n          .catch((error: any) => console.log(error));\n      } else {\n        console.log('not cordove')\n        this.getGeoLocation(data.coords.latitude, data.coords.longitude)\n      }\n    });\n  }\n  async getGeoLocation(lat: number, lng: number, type?) {\n    if (navigator.geolocation) {\n      let geocoder = await new google.maps.Geocoder();\n      let latlng = await new google.maps.LatLng(lat, lng);\n      let request = { latLng: latlng };\n\n      await geocoder.geocode(request, (results, status) => {\n        if (status == google.maps.GeocoderStatus.OK) {\n          let result = results[0];\n          this.zone.run(() => {\n            if (result != null) {\n              this.userCity = result.formatted_address;\n              if (type === 'reverseGeocode') {\n                this.latLngResult = result.formatted_address;\n              }\n            }\n          })\n        }\n      });\n    }\n  }\n  reverseGeocode(lat, lng) {\n    if (this.platform.is('cordova')) {\n      let options: NativeGeocoderOptions = {\n        useLocale: true,\n        maxResults: 5\n      };\n      this.nativeGeocoder.reverseGeocode(lat, lng, options)\n        .then((result: NativeGeocoderResult[]) => this.userLocationFromLatLng = result[0])\n        .catch((error: any) => console.log(error));\n    } else {\n      this.getGeoLocation(lat, lng, 'reverseGeocode');\n    }\n  }\n  forwardGeocode(address) {\n    if (this.platform.is('cordova')) {\n      let options: NativeGeocoderOptions = {\n        useLocale: true,\n        maxResults: 5\n      };\n      this.nativeGeocoder.forwardGeocode(address, options)\n        .then((result: NativeGeocoderResult[]) => {\n          this.zone.run(() => {\n            this.lat = result[0].latitude;\n            this.lng = result[0].longitude;\n          })\n        })\n        .catch((error: any) => console.log(error));\n    } else {\n      let geocoder = new google.maps.Geocoder();\n      geocoder.geocode({ 'address': address }, (results, status) => {\n        if (status == google.maps.GeocoderStatus.OK) {\n          this.zone.run(() => {\n            this.lat = results[0].geometry.location.lat();\n            this.lng = results[0].geometry.location.lng();\n          })\n        } else {\n          alert('Error - ' + results + ' & Status - ' + status)\n        }\n      });\n    }\n  }\n  ngOnInit() {\n  }\n}"],"sourceRoot":""}